Open . GenericLittleEndianWriter.JAVA 
Search private static Charset ASCII = Charset.forName("US-ASCII");
change to


  public class GenericLittleEndianWriter implements LittleEndianWriter {
  private static Charset ASCII = Charset.forName("BIG5"); 
  private ByteOutputStream bos; 


	



Serch in the same java writeShort((short) s.length());
change to


riteShort((short)getlength(s));


	





open StringUtil.java
search public static String getRightPaddedStr(String in, char padchar, int length) {
change to


public static int getlength(String str){ int i,t=0; byte[] bt = str.getBytes(); for(i=1;i<=bt.length;i++){ if (bt[i-1]<0) {t=t+2;i++;} else t=t+1; } return t; } public static String getRightPaddedStr(String in, char padchar, int length) { StringBuilder builder = new StringBuilder(in); for (int x = getlength(in); x < length; x++) {


	



Open MaplePacketCreator.java
Search private static void addCharStats(MaplePacketLittleEndianWriter mplew, MapleCharacter chr) {
Add on the code line


public static int getlength(String str){ int i,t=0; byte[] bt = str.getBytes(); for (i=1;i<=bt.length;i++){ if (bt[i-1]<0) {t=t+2;i++;} else t=t+1; } return t; }


	



Search the same java for (int x = chr.getName().length(); x < 13; x++) {
change to


for (int x = getlength(chr.getName()); x < 13; x++) {


	











open GenericLittleEndianWriter.JAVA
search writeAsciiString
change to


    public final void writeAsciiString(final String s) {
        write(s.getBytes(ASCII));
    }


    public final void writeAsciiString(String s, final int max) {
        if (s.getBytes(ASCII).length > max) {
            s = s.substring(0, max);
        }
        write(s.getBytes(ASCII));
        for (int i = s.getBytes(ASCII).length; i < max; i++) {
            write((byte) 0);
        }
    }


    public final void writeMapleAsciiString(final String s) {
        writeShort((short) s.getBytes(ASCII).length);
        writeAsciiString(s);
    }


	



open LittleEndianAccessor.JAVA
search readAsciiString
change to


    public final String readAsciiString(final int n) {
        try {
            final byte ret[] = new byte[n];
            for (int x = 0; x < n; x++) {
                ret[x] = readByte();
            }
            return new String(ret, "big5");
        } catch (UnsupportedEncodingException ex) {
            System.err.println(ex);
        }
        return "";
    }